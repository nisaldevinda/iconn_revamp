<?php

namespace App\Services;

use App\Library\Interfaces\ModelReaderInterface;
use Log;
use \Illuminate\Support\Facades\Lang;
use App\Exceptions\Exception;
use App\Library\Store;
use Illuminate\Support\Facades\DB;
use App\Traits\JsonModelReader;

/**
 * Name: AutoGenerateIdService
 * Purpose: Performs tasks related to the AutoGenerateIdService model.
 * Description: AutoGenerateIdService number
 * Module Creator: Sameer Niroshan
 */
class AutoGenerateIdService extends BaseService
{
    use JsonModelReader;

    private $store;
    private $autoGenerateIdModel;


    public function __construct(Store $store)
    {
        $this->store = $store;
        $this->autoGenerateIdModel = $this->getModel('autoGeneratedId', true);
    }

    /**
     * Following function sends a incremented number to the controller.
     *
     * @param prefix & controlName
     * @return int | String | array
     *
     * Usage:
     * $id => 1
     *
     * Sample output:
     * {
     *    "message": "Id Retrieved Successfully.",
     *     "data": "EMP000024"
     * }
     */
    public function getAutoGeneratedNumber($autoGenerateIdData)
    {
        try {
            $returnRunningNumber = $this->getCurrentRunningNumber($autoGenerateIdData);
            $result = $this->getRunningNumber($returnRunningNumber);

            if (!empty($result)) {
                return $result;
            } else {
                return null;
            }

        } catch (Exception $e) {
            Log::error($e->getMessage());
            return $this->error($e->getCode(), Lang::get('autoGenerateIdMessages.basic.ERR_ID_RETRIVE'), null);
        }
    }

    public function getIncrementingNumber()
    {
        try {

            $prefixCode = DB::table('prefixCode')->where('modelType', 'employee')->first();

            if (empty($prefixCode)) {
                return $this->success(200, Lang::get('autoGenerateIdMessages.basic.SUCC_ID_RETRIVE'), null);
            }

            $autoGenerateIdData["prefix"] = $prefixCode->prefix;
            $autoGenerateIdData["modelType"] = $prefixCode->modelType;

            $returnRunningNumber = $this->getIncrementNumber($autoGenerateIdData);
            $result = $this->getRunningNumber($returnRunningNumber);

            if (!empty($result)) {
              return $this->success(200, Lang::get('autoGenerateIdMessages.basic.SUCC_ID_RETRIVE'), $result);
            } else {
                return null;
            }
        } catch (Exception $e) {
            Log::error($e->getMessage());
            return $this->error($e->getCode(), Lang::get('autoGenerateIdMessages.basic.ERR_ID_RETRIVE'), null);
        }
    }

    /**
     * Following function adds the needed length and concats the Prefix to the running number.
     *
     * @param $result
     * @return int | String | array
     *
     * Usage:
     * $id =>
     *
     * Sample output: EMP000024
     *
     */
    private function getRunningNumber($result)
    {
        if (!empty($result) ) {
           $prefix = $result['prefix'];
           $concat_number = str_pad($result['runningNumber'], $result['length'], 0, STR_PAD_LEFT);
           return $prefix . $concat_number;
        } else {
            return null;
        }
    }

    /**
     * Following function generates the current running number and updates the database as well.
     *
     * @param $autoGenerateIdData
     * @return int | String | array
     *
     * Usage:
     * $id => 1
     *
     * Sample output:
     *[
     *   "lenth" => 6
     *   "runningNumber" => 25
     *   "prefix" => "EMP"
     *]
     */
    private function getCurrentRunningNumber($autoGenerateIdData)
    {
        $runningNumber = 0;

        try {

            $prefixCodeSeting = DB::table($this->autoGenerateIdModel->getName())
                ->where("prefix", $autoGenerateIdData["prefix"])
                ->where("modelType", $autoGenerateIdData["modelType"])
                ->where("isDelete", false)
                ->first();

            if (!is_null($prefixCodeSeting)) {

                $runningNumber = $prefixCodeSeting->nextNo;
                $runningNumber = $runningNumber + 1;
                $prefixCodeSeting->nextNo = $runningNumber;
                $length = $prefixCodeSeting->length;

                $isNumUpdated = DB::table($this->autoGenerateIdModel->getName())
                    ->where('id', $prefixCodeSeting->id)
                    ->update(['nextNo' => $runningNumber]);

                if ($isNumUpdated) {
                    return array("length" => $length, "runningNumber" => $runningNumber, "prefix" => $prefixCodeSeting->prefix);
                }

                return $this->error(Lang::get('autoGenerateIdMessages.basic.ERR_RUNNING_NUM'), null);
            }
        } catch (Exception $e) {
            Log::error($e->getMessage());
            return $this->error($e->getCode(), Lang::get('autoGenerateIdMessages.basic.ERR_RUNNING_NUM'), null);
        }
    }

    private function getIncrementNumber($autoGenerateIdData)
    {
        try {

            $prefixCodeSeting = DB::table($this->autoGenerateIdModel->getName())
                ->where("prefix", $autoGenerateIdData["prefix"])
                ->where("modelType", $autoGenerateIdData["modelType"])
                ->first();

            $recentlyAddedEmployeeNumber = null;
            if (DB::table('employee')->get()->count() > 0) {
                // TODO: this like query can be optimized if we limit single employee number format
                $recentlyAddedEmployeeNumber = DB::table('employee')
                    ->where('employeeNumber', 'LIKE', $prefixCodeSeting->prefix . '%')
                    ->select('employeeNumber')
                    ->orderBy('employeeNumber','desc')
                    ->first();
            }

            if (empty($recentlyAddedEmployeeNumber)) {
                $runningNumber = 1 ;
                $length = $prefixCodeSeting->length;
                $prefix = $prefixCodeSeting->prefix;

                return array("length" => $length, "runningNumber" => $runningNumber, "prefix" =>  $prefix);
            }

            if (!is_null($prefixCodeSeting)) {
                $recentlyAddedEmployeeNumber = preg_replace('/[^0-9.]/', '', $recentlyAddedEmployeeNumber->employeeNumber);
                $runningNumber = $recentlyAddedEmployeeNumber;
                $runningNumber = $runningNumber + 1;
                $length = $prefixCodeSeting->length;

                return array("length" => $length, "runningNumber" => $runningNumber, "prefix" => $prefixCodeSeting->prefix);
            }
        } catch (Exception $e) {
            Log::error($e->getMessage());
            return $this->error($e->getCode(), Lang::get('autoGenerateIdMessages.basic.ERR_RUNNING_NUM'), null);
        }
    }
    /*
      get Employee Number format for client side validation
    */

    public function getEmployeeNumberFormat()
    {
        try {
            $prefixCode = DB::table('prefixCode')->where('modelType', 'employee')->first();

            $format = [];
            $format['employeeNumber'] = '';
            $format['prefix'] = '';
            $format['length'] = '';

            if (empty($prefixCode)) {
                return $this->success(200, Lang::get('autoGenerateIdMessages.basic.SUCC_ID_RETRIVE'), $format);
            }

            $prefix = $prefixCode->prefix;
            $concat_number = str_pad(1, $prefixCode->length, 0, STR_PAD_LEFT);
            $format['employeeNumber'] = $prefix . $concat_number;
            $format['prefix'] = $prefix;
            $format['length'] = $prefixCode->length;

            return $this->success(200, Lang::get('autoGenerateIdMessages.basic.SUCC_ID_RETRIVE'),  $format);
        }catch (Exception $e) {
            Log::error($e->getMessage());
            return $this->error($e->getCode(), Lang::get('autoGenerateIdMessages.basic.ERR_RUNNING_NUM'), null);
        }
    }

    /**
     * get next employee number for given prefix and number length
     * * @param $data
     *  @return int | String | array
     *
     * Usage:
     * $data = [
     *   $prefix => "EM"
     *   $length  => 3
     *
     * ]
     *
     * Sample output:
     *[
     *   "employeeNumber" => EM0003
     *
     *]
    */

    public function getNextEmployeeNumber($data) {
        try {

            $prefixCode = $this->store->getFacade()::table($this->autoGenerateIdModel->getName())
                ->where("modelType", "employee")
                ->first();

            $employeeNumber= '';

            if ($this->store->getFacade()::table('employee')->get()->count() > 0) {

                $recentlyAddedEmployeeNumber = $this->store->getFacade()::table('employee')
                    ->select('employeeNumber')
                    ->orderBy('employeeNumber','desc')
                    ->first();

                if ($prefixCode->prefix != '') {
                    $recentlyAddedEmployeeNumber = preg_replace('/[^0-9.]/', '', $recentlyAddedEmployeeNumber->employeeNumber);

                } else {

                    $recentlyAddedEmployeeNumber = $recentlyAddedEmployeeNumber->employeeNumber;
                }

                $empNumber = $recentlyAddedEmployeeNumber + 1;
                $length = $data['length'];

                $nextEmployeeNumber = [
                    "length" => $length,
                    "runningNumber" => $empNumber,
                    "prefix" => $data['prefix']
                ];
                $employeeNumber = $this->getRunningNumber($nextEmployeeNumber);
            } else {
                $runningNumber = 1 ;
                $length = $data['length'];
                $prefix = $data['prefix'];

                $nextEmployeeNumber = [
                    "length" => $length,
                    "runningNumber" => $runningNumber,
                    "prefix" =>  $prefix
                ];
                $employeeNumber = $this->getRunningNumber($nextEmployeeNumber);

            }

            return $this->success(200, Lang::get('autoGenerateIdMessages.basic.SUCC_ID_RETRIVE'),  $employeeNumber);

        } catch (Exception $e) {
            Log::error($e->getMessage());
            return $this->error($e->getCode(), Lang::get('autoGenerateIdMessages.basic.ERR_ID_RETRIVE'), null);
        }
    }

     /**
     * to add employee number configuration
     * *@param $data
     *  @return int | String | array
     *  Required fields : prefix and length
     *  Usage:
     *   $data = [
     *     $prefix => "EM"
     *     $length  => 3
     *   ]
     *
     * Sample output:
     *[
     *  $statusCode => 200,
     *  $message => "Company updated Successfully",
     *  $data => [{
     *     $prefix => "EM"
     *     $length  => 3
     * }]
     *
     *]
    */
    public function addEmployeeNumberConfig($data) {
        try {
            $prefixCode = $this->store->getFacade()::table($this->autoGenerateIdModel->getName())
              ->where("modelType", "employee")
              ->first();

            if (empty($prefixCode)) {
                $prefixCode = $this->store->getFacade()::table($this->autoGenerateIdModel->getName())
                  ->insert([
                    "length" => $data['length'],
                    "prefix" => $data['prefix']
                  ]);
            } else {
                $prefixCode =  $this->store->getFacade()::table($this->autoGenerateIdModel->getName())->update([
                    "length" => $data['length'],
                    "prefix" => $data['prefix']
                 ]);
            }
            return $this->success(200, Lang::get('autoGenerateIdMessages.basic.SUCC_EMP_NUMBER_CONFIG_UPDATE'),$prefixCode);
        } catch (Exception $e) {
            Log::error($e->getMessage());
            return $this->error($e->getCode(), Lang::get('autoGenerateIdMessages.basic.ERR_EMP_NUMBER_CONFI_UPDATE'), null);
        }
    }
}
